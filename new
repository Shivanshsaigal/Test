import { LitElement, html, css } from 'lit';
import { customElement, state } from 'lit/decorators.js';

@customElement('base-filter')
export class BaseFilter extends LitElement {
  @state() selectedYear: string = '';
  @state() filteredCards: HTMLElement[] = [];
  @state() layoutMode: string = '3'; // Default mode: 3 cards per item
  @state() noOfSlides: number = 0; // Number of carousel items

  static styles = css`
    :host {
      display: block;
    }
    select {
      margin-bottom: 10px;
      padding: 5px;
    }
  `;

  connectedCallback(): void {
    super.connectedCallback();
    this.updateFilteredCards();
    window.addEventListener('resize', this.updateLayoutMode.bind(this));
    this.updateLayoutMode(); // Initialize mode based on screen size
  }

  disconnectedCallback(): void {
    window.removeEventListener('resize', this.updateLayoutMode.bind(this));
    super.disconnectedCallback();
  }

  updateLayoutMode(): void {
    const screenWidth = window.innerWidth;
    if (screenWidth < 768) {
      this.layoutMode = '1'; // Mobile mode
    } else {
      this.layoutMode = this.filteredCards.length < 4 ? '3' : '6';
    }
    this.requestUpdate();
  }

  updateFilteredCards(): void {
    const parent = this.parentElement;
    if (!parent) return;
    
    const allCards = Array.from(parent.querySelectorAll('icon-cards')) as HTMLElement[];
    this.filteredCards = allCards.filter(card => 
      !this.selectedYear || card.getAttribute('year') === this.selectedYear
    );
    this.updateLayoutMode();
    this.noOfSlides = Math.ceil(this.filteredCards.length / (this.layoutMode === '6' ? 6 : this.layoutMode === '3' ? 3 : 1));
  }

  handleFilterChange(event: Event): void {
    const target = event.target as HTMLSelectElement;
    this.selectedYear = target.value;
    this.updateFilteredCards();
  }

  renderCarouselItems() {
    let groupedCards: HTMLElement[][] = [];
    const chunkSize = this.layoutMode === '6' ? 6 : this.layoutMode === '3' ? 3 : 1;
    
    for (let i = 0; i < this.filteredCards.length; i += chunkSize) {
      groupedCards.push(this.filteredCards.slice(i, i + chunkSize));
    }

    return groupedCards.map(group => html`
      <div slot="carousel-item">
        ${group.map(card => html`${card.cloneNode(true)}`)}
      </div>
    `);
  }
  updateAllCards(): void {
    const parent = this.parentElement;
    if (!parent) return;
    
    this.filteredCards = Array.from(parent.querySelectorAll('icon-cards')) as HTMLElement[];
    this.updateLayoutMode();
    this.noOfSlides = Math.ceil(this.filteredCards.length / (this.layoutMode === '6' ? 6 : this.layoutMode === '3' ? 3 : 1));
  }

  firstUpdated(): void {
    const selectElement = this.querySelector('select[slot="filter-controls"]') as HTMLSelectElement | null;
    if (selectElement) {
      selectElement.addEventListener('change', this.handleFilterChange.bind(this));
    }
  }

  render() {
    return html`
      <slot name="filter-controls"></slot> <!-- Light DOM slot for select dropdown -->
      <base-carousel slot="filter-display" .noOfSlides=${this.noOfSlides}>
        ${this.renderCarouselItems()}
      </base-carousel>
    `;
  }
}

