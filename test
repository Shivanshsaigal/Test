const validation = {
  validateData: {},

  fieldFormat: function (type, wrapper = document.querySelector('.wrapper')) {
    if (isServer) {
      const pData = new URLSearchParams({
        ProductCode: productInfo.productCode,
        Channel: productInfo.channel,
        InsuredType: type,
        Language: productInfo.langCode,
      }).toString();

      fetch(api_getFieldFormat, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
        body: pData,
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.result === "success") {
            validation.validateData[type] = data.response.fields;
            validation.setupField(validation.validateData[type], wrapper);
            document.querySelector(".getAQuote").classList.add("loaded");
          }
        })
        .catch((err) => console.error("Error fetching field format:", err));
    }
  },

  setupField: function (data, wrapper = document.querySelector('.wrapper')) {
    data.forEach((field) => {
      const description = field.description;
      const fieldElements = wrapper.querySelectorAll(`[data-description="${description}"]`); // Select all matching elements

      fieldElements.forEach((fieldElement) => {
        // Handle 'required' attribute
        if (field.mandatory === "N") {
          fieldElement.removeAttribute("required");
        }

        // Handle 'data-fieldId' attribute
        if (field.fieldId) {
          fieldElement.setAttribute("data-fieldId", field.fieldId);
        }

        // Handle 'maxlength' attribute
        if (field.length) {
          fieldElement.setAttribute("maxlength", field.length);
        }

        // Handle dropdown options
        if (field.options) {
          const selectElements = wrapper.querySelectorAll(`select[data-description="${description}"]`);
          selectElements.forEach((selectElement) => {
            field.options.forEach((option) => {
              const opt = document.createElement("option");
              opt.value = option[0];
              opt.textContent = option[1];
              if (option[0] === "-1") {
                opt.disabled = true;
              }
              selectElement.appendChild(opt);
            });

            // Disable dropdown if there's only one option
            if (field.options.length === 1) {
              selectElement.disabled = true;
              selectElement.closest("div").classList.add("disabled");
            }
          });
        }

        // Special handling for district fields
        if (description === "district") {
          const districtSpan = wrapper.querySelector(`span[data-description="district"]`);
          const districtSelect = wrapper.querySelector(`select[data-description="district"]`);
          if (districtSpan && districtSelect) {
            const districtCode = districtSpan.innerHTML.trim();
            if (districtCode.length > 0) {
              const districtOption = districtSelect.querySelector(`option[value="${districtCode}"]`);
              if (districtOption) {
                districtSpan.innerHTML = districtOption.innerHTML;
              }
            }
          }
        }

        // Handle saved values
        if (fieldElement.dataset.savedValue) {
          const selectElements = wrapper.querySelectorAll(`select[data-description="${description}"]`);
          selectElements.forEach((selectElement) => {
            selectElement.value = fieldElement.dataset.savedValue;
          });
        }
      });
    });
  },

  fieldValidate: function (field) {
    const str = field.value.trim();

    if (field.dataset.fieldId && field.dataset.fieldId !== "8") {
      if (isServer) {
        const pData = new URLSearchParams({
          ProductCode: productInfo.productCode,
          Channel: productInfo.channel,
          Language: productInfo.langCode,
          FieldList: JSON.stringify([{ id: field.dataset.fieldId, value: str }]),
        }).toString();

        fetch(api_validateField, {
          method: "POST",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
          body: pData,
        })
          .then((response) => response.json())
          .then((data) => {
            const errorMsgContainer = field.closest("div").querySelector(".fieldErrorMsg");
            if (errorMsgContainer) errorMsgContainer.remove();

            if (data.result === "success") {
              field.setAttribute("validated", "true");
            } else if (data.result === "failed" && data.response) {
              data.response.forEach((error) => {
                if (field.dataset.fieldId === error.fieldId) {
                  const errorMsg = document.createElement("div");
                  errorMsg.classList.add("fieldErrorMsg");
                  errorMsg.textContent = error.message;
                  field.closest("div").appendChild(errorMsg);
                  field.setAttribute("validated", "false");
                }
              });
            }
          })
          .catch((err) => console.error("Error validating field:", err));
      }
    } else {
      field.setAttribute("validated", "true");
    }
  },

  validateField: function (wrapper = document.querySelector('.wrapper'), cb) {
    if (isServer && allowAjax) {
      allowAjax = false;

      const pData = new URLSearchParams({
        ProductCode: productInfo.productCode,
        Channel: productInfo.channel,
        Language: productInfo.langCode,
      });

      const inputs = wrapper.querySelectorAll("input, select");
      inputs.forEach((input) => {
        const value = input.value.trim();
        if (input.dataset.fieldId && (input.hasAttribute("required") || value.length > 0)) {
          let fieldValue = value;
          if (input.dataset.fieldId === "8" && value.includes(" - ")) {
            const dobParts = value.split(" - ");
            fieldValue = `${dobParts[2]}/${dobParts[1]}/${dobParts[0]}`;
          }
          pData.append("FieldList", JSON.stringify({ id: input.dataset.fieldId, value: fieldValue }));
        }
      });

      fetch(api_validateField, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
        body: pData.toString(),
      })
        .then((response) => response.json())
        .then((data) => {
          inputs.forEach((input) => input.setAttribute("validated", "true"));
          wrapper.querySelectorAll(".fieldErrorMsg").forEach((msg) => msg.remove());

          let fieldValid = true;

          if (data.result === "failed" && data.response) {
            data.response.forEach((error) => {
              const field = wrapper.querySelector(`[data-fieldId="${error.fieldId}"]`);
              if (field) {
                field.setAttribute("validated", "false");
                const errorMsg = document.createElement("div");
                errorMsg.classList.add("fieldErrorMsg");
                errorMsg.textContent = error.message;
                field.closest("div").appendChild(errorMsg);
                fieldValid = false;
              }
            });
          }

          if (cb) {
            if (cb === "pd") banner.drawResult(fieldValid);
            else if (cb === "pi") selectAPlan.drawValidate(fieldValid);
            else if (cb === "gaq") getAQuote.drawResult(fieldValid);
            else if (cb === "cu") contactUs.drawResult(fieldValid);
            else if (cb === "cf") confirmation.drawResult(fieldValid);
          }

          allowAjax = true;
        })
        .catch((err) => console.error("Error validating fields:", err));
    }
  },
};

document.querySelector('.personalDetailsForm').addEventListener('blur', (event) => {
  if (
    event.target.matches('input[type="text"]') || 
    event.target.matches('input[type="tel"]') || 
    event.target.matches('input[type="number"]')
  ) {
    validation.fieldValidate(event.target);
  }
}, true); 





function validateAgeInput(inputElement) {
  const age = parseInt(inputElement.value.trim(), 10);

  // Define age limits for different types
  const ageLimits = {
    PH: { min: 18, max: 80 }, // Primary Holder: 18-80 years
    SP: { min: 18, max: 80 }, // Spouse: 18-80 years
    CH: { min: 0, max: 17 },  // Child: 0-17 years
  };

  // Get the user type from the data attribute (e.g., 'PH', 'SP', 'CH')
  const userType = inputElement.dataset.userType;

  // Clear previous error message
  const errorContainer = inputElement.closest('div').querySelector('.fieldErrorMsg');
  if (errorContainer) errorContainer.remove();

  // Validate the age against the limits
  if (!ageLimits[userType]) {
    console.error(`Unknown user type: ${userType}`);
    return;
  }

  const { min, max } = ageLimits[userType];
  if (isNaN(age) || age < min || age > max) {
    const errorMsg = document.createElement('div');
    errorMsg.classList.add('fieldErrorMsg');
    errorMsg.textContent = `Age for ${userType} must be between ${min} and ${max} years.`;
    inputElement.closest('div').appendChild(errorMsg);
    inputElement.setAttribute('validated', 'false');
  } else {
    inputElement.setAttribute('validated', 'true');
  }
}

document.querySelector('.personalDetailsForm').addEventListener('blur', (event) => {
  if (event.target.matches('input[data-user-type]')) {
    validateAgeInput(event.target);
  }
}, true);

function validateRadioButtons(wrapper, fieldNames) {
  let isValid = true;

  fieldNames.forEach((name) => {
    const options = wrapper.querySelectorAll(`input[name="${name}"]`);
    const isChecked = Array.from(options).some((option) => option.checked);

    // Clear previous error messages
    const errorContainer = wrapper.querySelector(`.fieldErrorMsg[data-name="${name}"]`);
    if (errorContainer) errorContainer.remove();

    if (!isChecked) {
      isValid = false;
      // Add error message
      const errorMsg = document.createElement('div');
      errorMsg.classList.add('fieldErrorMsg');
      errorMsg.setAttribute('data-name', name);
      errorMsg.textContent = `${name.replace('-', ' ')} selection is required.`;
      options[0].closest('div').appendChild(errorMsg);
    }
  });

  return isValid;
}
const formWrapper = document.querySelector('.personalDetailsForm');
const isValid = validateRadioButtons(formWrapper, ['gender', 'smoking-status']);

if (isValid) {
  console.log('All radio buttons are valid');
} else {
  console.log('Please complete all required selections.');
}


function validateRadioButtons(wrapper, fieldNames) {
  let isValid = true;

  fieldNames.forEach((name) => {
    const options = wrapper.querySelectorAll(`input[name="${name}"][required]`); // Only validate if required
    const isChecked = Array.from(options).some((option) => option.checked);

    options.forEach((option) => {
      // Clear previous error messages in the parent div
      const parentDiv = option.closest('div');
      const errorContainer = parentDiv.querySelector('.fieldErrorMsg');
      if (errorContainer) errorContainer.remove();
    });

    if (!isChecked && options.length > 0) {
      isValid = false;

      // Add error message to the parent div of the first option
      const errorMsg = document.createElement('div');
      errorMsg.classList.add('fieldErrorMsg');
      errorMsg.textContent = `${name.replace('-', ' ')} selection is required.`;

      const parentDiv = options[0].closest('div');
      parentDiv.appendChild(errorMsg);
    }
  });

  return isValid;
}


function submitQuoteRequest(formWrapper) {
  // Prepare data
  const formData = {};
  const inputs = formWrapper.querySelectorAll('input, select');

  inputs.forEach((input) => {
    const key = input.name || input.id; // Use `name` or `id` as key
    const value = input.type === 'radio' ? (input.checked ? input.value : null) : input.value;

    if (value) {
      formData[key] = value;
    }
  });

  // Check if mandatory fields are complete
  const mandatoryFields = formWrapper.querySelectorAll('[required]');
  let isValid = true;

  mandatoryFields.forEach((field) => {
    if (!field.value.trim()) {
      isValid = false;
      field.classList.add('fieldError');
    } else {
      field.classList.remove('fieldError');
    }
  });

  if (!isValid) {
    alert('Please fill all required fields before submitting.');
    return;
  }

  // Send Quote Request via Fetch
  fetch('https://api.example.com/submitQuote', { // Replace with actual API endpoint
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(formData),
  })
    .then((response) => response.json())
    .then((data) => {
      if (data.result === 'success') {
        alert('Quote submitted successfully!');
        console.log('Response:', data);
      } else {
        alert('Failed to submit quote. Please try again.');
      }
    })
    .catch((error) => {
      console.error('Error submitting quote:', error);
      alert('An error occurred. Please try again later.');
    });
}
document.querySelector('#submitQuoteBtn').addEventListener('click', () => {
  const formWrapper = document.querySelector('.personalDetailsForm');
  submitQuoteRequest(formWrapper);
});


drawResult: function (fieldValid) {
  if (!fieldValid) {
    getAQuote.valid = fieldValid;
  }

  if (getAQuote.valid) {
    const memberInfo = {
      applicant: [],
      PH: [],
      SP: [],
      CH: []
    };

    // Collect applicant information
    const applicantData = {};
    applicantData["last name"] = document.querySelector('[data-description="last name"]').value;
    applicantData["hk contact number"] = document.querySelector('[data-description="hk contact number"]').value;
    applicantData["email"] = document.querySelector('[data-description="email"]').value;
    memberInfo.applicant.push(applicantData);

    // Collect PH, SP, and CH information
    document.querySelectorAll('.selected[data-val="PH"], .selected[data-val="SP"], .selected[data-val="CH"]').forEach((element) => {
      const key = element.getAttribute('data-val');
      const data = {};
      data.dob = element.querySelector('.dob input').value;

      if (key === 'PH') {
        data["last name"] = document.querySelector('[data-description="last name"]').value;
        data["hk contact number"] = document.querySelector('[data-description="hk contact number"]').value;
        data["email"] = document.querySelector('[data-description="email"]').value;
      }

      data.smoker = element.querySelector('.smokeOption.selected')?.getAttribute('data-val');
      memberInfo[key].push(data);
    });

    storeInfo('_memberInfo', memberInfo);

    if (isServer) {
      const formParams = new FormData(document.getElementById('getAQuoteForm'));
      const pData = {};

      // Collect form parameters
      formParams.forEach((value, key) => {
        pData[key] = value;
      });

      // Add additional parameters
      pData.ProductCode = productInfo.productCode;
      pData.Channel = productInfo.channel;
      pData.Language = productInfo.langCode;

      if (utm.findGetParameter('source') !== null) {
        pData.source = utm.findGetParameter('source');
      }

      const applicant = {
        policies: [{}]
      };

      // Set PH as applicant or not
      applicant.isPhInsured = document.querySelector('.selected[data-val="PH"]') ? 'Y' : 'N';

      // WhatsApp Promo Consent
      applicant.whatsappConsentStatus =
        document.getElementById('whatsappPromo').checked && document.getElementById('tnc').checked
          ? 'Y'
          : 'N';

      // Set PH information
      applicant.policies[0].insuredType = 'PH';
      applicant.policies[0].lastName = document.querySelector('[data-description="last name"]').value.toUpperCase();
      applicant.policies[0].mobilePhoneNum = document.querySelector('[data-description="hk contact number"]').value || '';
      applicant.policies[0].email = document.querySelector('[data-description="email"]').value || '';

      if (document.querySelector('.policyBox.result_success')) {
        applicant.policies[0].spousePolicyNumber = document.querySelector('.policyNumber').value;
      }

      // Collect coverage details for PH, SP, CH
      const dobString = [];
      const smokingString = [];
      const coverageString = [];
      const ageString = [];
      const dataMapping = {
        M: 'Male',
        F: 'Female',
        Y: 'Yes',
        N: 'No',
        PH: 'Me',
        SP: 'Spouse',
        CH: 'Child'
      };

      document.querySelectorAll('.selected[data-val="PH"], .selected[data-val="SP"], .selected[data-val="CH"]').forEach((element, index) => {
        const key = element.getAttribute('data-val');
        const dobParts = element.querySelector('.dob input').value.split(' - ');
        const dobValue = `${dobParts[2]}/${dobParts[1]}/${dobParts[0]}`;
        const smokerStatus = element.querySelector('.smokeOption.selected')?.getAttribute('data-val');

        dobString.push(dobValue);
        coverageString.push(dataMapping[key]);
        smokingString.push(key === 'CH' ? 'No' : dataMapping[smokerStatus]);
        ageString.push(_calculateAge(dobParts[2], dobParts[1], dobParts[0]));

        if (key === 'PH') {
          applicant.policies[0].dob = dobValue;
          if (smokerStatus) {
            applicant.policies[0].smoker = smokerStatus;
          }
        } else {
          const newApplicant = {
            insuredType: key,
            dob: dobValue
          };
          if (smokerStatus) {
            newApplicant.smoker = smokerStatus;
          }
          applicant.policies.push(newApplicant);
        }
      });

      const applicantDataLayer = {
        event: 'Step1 Get a Quote',
        DOB1: dobString.join(';'),
        Smoking1: smokingString.join(';'),
        Coverage1: coverageString.join(';'),
        age: ageString.join(';')
      };

      storeInfo('_applicantInfo', applicantDataLayer);
      pData.Application = JSON.stringify(applicant);

      // Remove previous API error messages
      document.querySelector('.errorMsgWrapper.apiError')?.classList.remove('show');

      // Submit via Fetch API
      fetch(api_createApplication, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(pData)
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.result === 'success') {
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
              event: 'eSales',
              eventName: 'eSales - Get a Quote',
              Product: productInfo.productCode
            });

            if (data.response) {
              storeInfo('_appInfo', data.response);
            }

            if (document.querySelector('.policyBox.result_success')) {
              memberInfo.applicant[0].hasPolicy = true;
              storeInfo('_memberInfo', memberInfo);
            }

            applicantDataLayer.productname = productInfo.name;
            window.dataLayer.push(applicantDataLayer);

            removeInfo('_promoInfo');

            setTimeout(() => {
              if (data.response.isWhatsappNotifSent === 'Y') {
                document.getElementById('whatsappOfferConsent').style.display = 'block';
                document.getElementById('whatsappPromo').checked = false;
              } else {
                window.location.href = step['10'];
              }
            }, 500);
          } else if (data.result === 'fail' && data.error && data.error.message) {
            const errorWrapper = document.querySelector('.errorMsgWrapper.apiError');
            errorWrapper?.classList.add('show');
            errorWrapper.querySelector('.errorMsg').textContent = data.error.message;
          }
        })
        .catch((error) => console.error('Error submitting application:', error));
    }
  } else {
    allowAjax = true;
  }
}


submitMember: function () {
  const formWrapper = document.querySelector('.personalDetailsForm');

  // Step 1: Validate fields (radio buttons, age, and general fields)
  const fieldNamesToValidate = ['gender', 'smoking-status']; // Radio field names
  const isRadioValid = validateRadioButtons(formWrapper, fieldNamesToValidate);
  const isAgeValid = validateAgeFields(formWrapper);
  const isFieldValid = validateGeneralFields(formWrapper);

  // Step 2: Check overall validity
  getAQuote.valid = isRadioValid && isAgeValid && isFieldValid;

  // Step 3: Draw result for the validation
  getAQuote.drawResult(getAQuote.valid);

  if (getAQuote.valid) {
    console.log('Form submission successful!');
    // Additional submission logic can go here
  } else {
    console.log('Form validation failed.');
  }
}

document.querySelector('.submit-member-button').addEventListener('click', () => {
  getAQuote.submitMember();
});


class CustomElement extends HTMLElement {
  constructor() {
    super();

    // Attach Shadow DOM
    this.attachShadow({ mode: 'open' });

    // Create a button inside the Shadow DOM
    const button = document.createElement('button');
    button.textContent = 'Toggle Attributes';
    this.shadowRoot.appendChild(button);

    // Attach event listener to the button
    button.addEventListener('click', this.toggleAttributes.bind(this));
  }

  // Function to toggle class and attributes
  toggleAttributes() {
    // Add or remove a class on the custom tag in the Light DOM
    if (this.classList.contains('active')) {
      this.classList.remove('active');
    } else {
      this.classList.add('active');
    }

    // Find all input fields in the Light DOM
    const inputFields = this.querySelectorAll('input');

    // Add or remove the 'required' attribute
    inputFields.forEach((input) => {
      if (input.hasAttribute('required')) {
        input.removeAttribute('required');
      } else {
        input.setAttribute('required', '');
      }
    });
  }
}

// Define the custom element
customElements.define('custom-element', CustomElement);

function fetchProductPrices(dob, smoker, planLevels) {
  // Validate inputs
  if (!dob || !smoker) {
    console.error("Both DOB and smoking option are required.");
    return;
  }

  // Prepare common payload parameters
  const commonPayload = {
    ProductCode: "YOUR_PRODUCT_CODE", // Replace with actual ProductCode
    Channel: "YOUR_CHANNEL",         // Replace with actual Channel
    Gender: "YOUR_GENDER",           // Replace dynamically if required
    DOB: dob,
    Smoker: smoker,
    InsuredTypeCombo: "YOUR_COMBO",  // Replace dynamically if required
    InsuredTypeQuote: "YOUR_QUOTE"   // Replace dynamically if required
  };

  // Loop through plan levels
  planLevels.forEach((planLevel) => {
    // Add PlanLevel to payload
    const payload = {
      ...commonPayload,
      PlanLevel: planLevel
    };

    // Convert payload to URL-encoded string
    const encodedPayload = new URLSearchParams(payload).toString();

    // Fetch prices for the current PlanLevel
    fetch("YOUR_API_ENDPOINT", { // Replace with your API endpoint
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: encodedPayload
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.result === "success") {
          console.log(`Prices for ${planLevel}:`, data.response);
          updateProductCard(planLevel, data.response); // Update card UI with response
        } else {
          console.error(`Failed to fetch prices for ${planLevel}:`, data.error);
        }
      })
      .catch((error) => {
        console.error(`Error fetching prices for ${planLevel}:`, error);
      });
  });
}

// Function to update product card based on response
function updateProductCard(planLevel, response) {
  const card = document.querySelector(`.product-card[data-plan-level="${planLevel}"]`);
  if (card) {
    card.querySelector(".price").textContent = `Price: ${response.price}`; // Example: Update price
  } else {
    console.error(`Card not found for PlanLevel: ${planLevel}`);
  }
}

// Example Usage
document.querySelector(".submit-button").addEventListener("click", () => {
  const dob = document.querySelector("#dob-input").value; // Replace with actual selector
  const smoker = document.querySelector(".smoking-option.selected")?.getAttribute("data-value"); // Replace with actual selector
  const planLevels = ["Plan1", "Plan2", "Plan3"]; // Example: Replace with actual PlanLevel values

  fetchProductPrices(dob, smoker, planLevels);
});
